
"use client";
import { ICreateProgramData } from "@/lib/repository/program.repository";
import { UploadButton } from "@/lib/utils";
import { useRouter } from "next/navigation";
import { useEffect, useState } from "react";

interface Category {
    id: string;
    name: string;
}

interface FormData {
    title: string;
    description: string;
    duration: string;
    location: string;
    criteria: string;
    categoryId: string;
    startDate: string;
    endDate: string;
    programImageUrl: string;
    videoUrl: string;
    videoThumbnailUrl: string;
    isOpen: boolean;
}

const initialFormData: FormData = {
    title: "",
    description: "",
    duration: "",
    location: "",
    criteria: "",
    categoryId: "",
    startDate: "",
    endDate: "",
    programImageUrl: "",
    videoUrl: "",
    videoThumbnailUrl: "",
    isOpen: true,
};

interface IAddProgramFormProps {
    userId: string;
}

export default function AddProgramForm({ userId }: IAddProgramFormProps) {
    const router = useRouter();
    const [currentStep, setCurrentStep] = useState(1);
    const [formData, setFormData] = useState<FormData>(initialFormData);
    const [categories, setCategories] = useState<Category[]>([]);
    const [isLoading, setIsLoading] = useState(false);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [isAiAssisting, setIsAiAssisting] = useState(false);
    const [showAiAssistant, setShowAiAssistant] = useState(false);
    const [aiPrompt, setAiPrompt] = useState("");
    const [errors, setErrors] = useState<Record<string, string>>({});
    const [imageUrl, setImageUrl] = useState<string>("");
    const [isImageUploading, setIsImageUploading] = useState(false);

    const steps = [
        { id: 1, title: "Basic Info", description: "Program details and category" },
        { id: 2, title: "Content", description: "Description and requirements" },
        { id: 3, title: "Schedule", description: "Duration and dates" },
        { id: 4, title: "Preview", description: "Review and publish" }
    ];

    useEffect(() => {
        const loadCategories = async () => {
            try {
                setIsLoading(true);
                const categoriesData = await fetch("/api/category");
                if (!categoriesData.ok) {
                    throw new Error("Failed to load categories");
                }
                const categories = await categoriesData.json();
                setCategories(categories);
            } catch (error) {
                console.error("Failed to load categories:", error);
                alert("Failed to load categories");
            } finally {
                setIsLoading(false);
            }
        };
        loadCategories();
    }, []);

    const handleInputChange = (
        field: keyof FormData,
        value: string | boolean
    ) => {
        setFormData((prev) => ({ ...prev, [field]: value }));
        if (errors[field]) {
            setErrors((prev) => ({ ...prev, [field]: "" }));
        }
    };

    const handleAiAssist = async () => {
        if (!aiPrompt.trim()) {
            alert("Please enter ideas or keywords for your program description");
            return;
        }
        setIsAiAssisting(true);
        try {
            const selectedCategory = categories.find(
                (cat) => cat.id === formData.categoryId
            );
            const response = await fetch("/api/ai-assistant", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    prompt: aiPrompt,
                    programTitle: formData.title || "Cultural Heritage Program",
                    category: selectedCategory?.name || "Cultural Heritage",
                    duration: formData.duration || "",
                    location: formData.location || "",
                }),
            });
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
            }
            const data = await response.json();
            if (data.success && data.generatedDescription) {
                handleInputChange("description", data.generatedDescription);
                setShowAiAssistant(false);
                setAiPrompt("");
                alert("Description successfully generated by AI! You can edit it as needed.");
            } else {
                throw new Error(data.error || "No description generated");
            }
        } catch (error) {
            console.error("AI Assistant error:", error);
            let errorMessage = "Failed to generate description with AI. Please try again or write manually.";
            if (error instanceof Error) {
                if (error.message.includes("API key authentication failed")) {
                    errorMessage = "AI service configuration error. Please contact support.";
                } else if (error.message.includes("Too many requests")) {
                    errorMessage = "Too many requests. Please wait a moment and try again.";
                } else if (error.message.includes("safety filters")) {
                    errorMessage = "Your input was blocked by content filters. Please try rephrasing your description.";
                }
            }
            alert(errorMessage);
        } finally {
            setIsAiAssisting(false);
        }
    };

    const validateStep = (step: number): boolean => {
        const newErrors: Record<string, string> = {};
        
        switch (step) {
            case 1:
                if (!imageUrl) newErrors.programImageUrl = "Program image is required";
                if (!formData.title.trim()) newErrors.title = "Program title is required";
                if (!formData.categoryId) newErrors.categoryId = "Program category is required";
                if (!formData.location.trim()) newErrors.location = "Program location is required";
                break;
            case 2:
                if (!formData.description.trim()) newErrors.description = "Program description is required";
                if (!formData.criteria.trim()) newErrors.criteria = "Participant criteria is required";
                break;
            case 3:
                if (!formData.duration.trim()) newErrors.duration = "Program duration is required";
                if (!formData.startDate) newErrors.startDate = "Start date is required";
                if (!formData.endDate) newErrors.endDate = "End date is required";
                if (formData.startDate && formData.endDate && new Date(formData.startDate) >= new Date(formData.endDate)) {
                    newErrors.endDate = "End date must be after start date";
                }
                break;
        }
        
        setErrors(newErrors);
        return Object.keys(newErrors).length === 0;
    };

    const nextStep = () => {
        if (validateStep(currentStep)) {
            setCurrentStep(prev => Math.min(prev + 1, 4));
        }
    };

    const prevStep = () => {
        setCurrentStep(prev => Math.max(prev - 1, 1));
    };

    const handleSubmit = async () => {
        if (!validateStep(currentStep)) {
            alert("Please complete all required fields");
            return;
        }
        setIsSubmitting(true);
        try {
            const programData: ICreateProgramData = {
                artisanId: userId,
                title: formData.title.trim(),
                description: formData.description.trim(),
                duration: formData.duration.trim(),
                location: formData.location.trim(),
                criteria: formData.criteria.trim(),
                categoryId: formData.categoryId,
                startDate: new Date(formData.startDate),
                endDate: new Date(formData.endDate),
                programImageUrl: imageUrl,
                videoUrl: formData.videoUrl.trim() || undefined,
                videoThumbnailUrl: formData.videoThumbnailUrl.trim() || undefined,
                isOpen: formData.isOpen,
            };
            await fetch("/api/program", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(programData),
            });
            alert("Program created successfully!");
            router.push("/dashboard/artisan/programs");
        } catch (error) {
            console.error("Failed to create program:", error);
            alert("Failed to create program. Please try again.");
        } finally {
            setIsSubmitting(false);
        }
    };

    if (isLoading) {
        return (
            <div className="min-h-screen bg-gradient-to-br from-orange-50 via-yellow-50 to-orange-100 flex items-center justify-center">
                <div className="bg-white rounded-2xl shadow-xl p-8 flex items-center gap-4">
                    <div className="animate-spin rounded-full h-8 w-8 border-4 border-orange-500 border-t-transparent"></div>
                    <span className="text-gray-700 font-medium">Loading categories...</span>
                </div>
            </div>
        );
    }

    return (
        <div className="min-h-screen bg-gradient-to-br from-orange-50 via-yellow-50 to-orange-100">
            <div className=" mx-auto px-4 py-8">
                <div className="max-w-4xl mx-auto">
                    {/* Header */}
                    <div className="mb-8">
                        <div className="bg-gradient-to-r from-orange-500 to-yellow-500 rounded-2xl p-8 text-white">
                            <h1 className="text-3xl md:text-4xl font-bold mb-2">Create New Program ðŸŽ­</h1>
                            <p className="text-white/90 text-lg">Share your cultural heritage knowledge with the world</p>
                        </div>
                    </div>

                    {/* Progress Steps */}
                    <div className="bg-white rounded-2xl shadow-lg border border-orange-200 p-6 mb-8">
                        <div className="flex items-center justify-between">
                            {steps.map((step, index) => (
                                <div key={step.id} className="flex items-center">
                                    <div className="flex flex-col items-center">
                                        <div className={`w-12 h-12 rounded-full flex items-center justify-center font-bold text-sm transition-all duration-300 ${
                                            currentStep >= step.id 
                                                ? 'bg-gradient-to-r from-orange-500 to-yellow-500 text-white shadow-lg' 
                                                : 'bg-gray-200 text-gray-500'
                                        }`}>
                                            {currentStep > step.id ? (
                                                <svg className="w-6 h-6" fill="currentColor" viewBox="0 0 20 20">
                                                    <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                                                </svg>
                                            ) : (
                                                step.id
                                            )}
                                        </div>
                                        <div className="mt-2 text-center">
                                            <div className={`font-semibold text-sm ${currentStep >= step.id ? 'text-orange-600' : 'text-gray-500'}`}>
                                                {step.title}
                                            </div>
                                            <div className="text-xs text-gray-400 mt-1">{step.description}</div>
                                        </div>
                                    </div>
                                    {index < steps.length - 1 && (
                                        <div className={`flex-1 h-1 mx-4 rounded transition-all duration-300 ${
                                            currentStep > step.id ? 'bg-gradient-to-r from-orange-500 to-yellow-500' : 'bg-gray-200'
                                        }`} />
                                    )}
                                </div>
                            ))}
                        </div>
                    </div>

                    {/* Form Content */}
                    <div className="bg-white rounded-2xl shadow-xl border border-orange-200 p-8">
                        {currentStep === 1 && (
                            <div className="space-y-6">
                                <h2 className="text-2xl font-bold text-gray-900 mb-6 flex items-center gap-3">
                                    <div className="w-8 h-8 bg-gradient-to-r from-orange-500 to-yellow-500 rounded-lg flex items-center justify-center">
                                        <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                        </svg>
                                    </div>
                                    Basic Information
                                </h2>

                                {/* Program Image */}
                                <div>
                                    <label className="block text-sm font-semibold text-gray-700 mb-3">
                                        Program Image <span className="text-red-500">*</span>
                                    </label>
                                    <div className="border-2 border-dashed border-orange-300 rounded-xl p-8 text-center hover:border-orange-400 transition-colors">
                                        {imageUrl ? (
                                            <div className="relative">
                                                <img src={imageUrl} alt="Program" className="w-full h-48 object-cover rounded-lg mb-4" />
                                                <button
                                                    type="button"
                                                    onClick={() => setImageUrl("")}
                                                    className="absolute top-2 right-2 bg-red-500 text-white rounded-full p-2 hover:bg-red-600 transition-colors"
                                                >
                                                    <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                                                    </svg>
                                                </button>
                                            </div>
                                        ) : (
                                            <div>
                                                <svg className="w-16 h-16 text-orange-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                                </svg>
                                                <UploadButton
                                                    endpoint="imageUploader"
                                                    onClientUploadComplete={(res) => {
                                                        if (res?.[0]?.url) {
                                                            setImageUrl(res[0].url);
                                                        }
                                                    }}
                                                    onUploadError={(error) => {
                                                        alert(`Upload failed: ${error.message}`);
                                                    }}
                                                />
                                            </div>
                                        )}
                                    </div>
                                    {errors.programImageUrl && <p className="text-red-500 text-sm mt-2">{errors.programImageUrl}</p>}
                                </div>

                                {/* Program Title */}
                                <div>
                                    <label className="block text-sm font-semibold text-gray-700 mb-3">
                                        Program Title <span className="text-red-500">*</span>
                                    </label>
                                    <input
                                        type="text"
                                        value={formData.title}
                                        onChange={(e) => handleInputChange("title", e.target.value)}
                                        placeholder="e.g., Traditional Batik Making Workshop"
                                        className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-200"
                                    />
                                    {errors.title && <p className="text-red-500 text-sm mt-2">{errors.title}</p>}
                                </div>

                                {/* Category and Location */}
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                    <div>
                                        <label className="block text-sm font-semibold text-gray-700 mb-3">
                                            Category <span className="text-red-500">*</span>
                                        </label>
                                        <select
                                            value={formData.categoryId}
                                            onChange={(e) => handleInputChange("categoryId", e.target.value)}
                                            className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-200"
                                        >
                                            <option value="">Select category</option>
                                            {categories.map((category) => (
                                                <option key={category.id} value={category.id}>
                                                    {category.name}
                                                </option>
                                            ))}
                                        </select>
                                        {errors.categoryId && <p className="text-red-500 text-sm mt-2">{errors.categoryId}</p>}
                                    </div>

                                    <div>
                                        <label className="block text-sm font-semibold text-gray-700 mb-3">
                                            Location <span className="text-red-500">*</span>
                                        </label>
                                        <input
                                            type="text"
                                            value={formData.location}
                                            onChange={(e) => handleInputChange("location", e.target.value)}
                                            placeholder="e.g., Yogyakarta, Indonesia"
                                            className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-200"
                                        />
                                        {errors.location && <p className="text-red-500 text-sm mt-2">{errors.location}</p>}
                                    </div>
                                </div>
                            </div>
                        )}

                        {currentStep === 2 && (
                            <div className="space-y-6">
                                <h2 className="text-2xl font-bold text-gray-900 mb-6 flex items-center gap-3">
                                    <div className="w-8 h-8 bg-gradient-to-r from-orange-500 to-yellow-500 rounded-lg flex items-center justify-center">
                                        <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                                        </svg>
                                    </div>
                                    Program Content
                                </h2>

                                {/* Description with AI Assistant */}
                                <div>
                                    <div className="flex items-center justify-between mb-3">
                                        <label className="block text-sm font-semibold text-gray-700">
                                            Program Description <span className="text-red-500">*</span>
                                        </label>
                                        <button
                                            type="button"
                                            onClick={() => setShowAiAssistant(!showAiAssistant)}
                                            className="inline-flex items-center gap-2 text-sm font-medium text-orange-600 hover:text-orange-700 transition-colors"
                                        >
                                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                                            </svg>
                                            AI Writing Assistant
                                        </button>
                                    </div>
                                    
                                    {showAiAssistant && (
                                        <div className="bg-gradient-to-r from-orange-50 to-yellow-50 border border-orange-200 rounded-xl p-4 mb-4">
                                            <h4 className="font-semibold text-gray-900 mb-2">âœ¨ AI Writing Assistant</h4>
                                            <textarea
                                                value={aiPrompt}
                                                onChange={(e) => setAiPrompt(e.target.value)}
                                                placeholder="Describe your program ideas (e.g., 'Traditional Indonesian dance workshop for beginners focusing on cultural preservation')"
                                                className="w-full px-3 py-2 border border-orange-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent resize-none"
                                                rows={3}
                                            />
                                            <div className="flex gap-2 mt-3">
                                                <button
                                                    type="button"
                                                    onClick={handleAiAssist}
                                                    disabled={isAiAssisting || !aiPrompt.trim()}
                                                    className="bg-gradient-to-r from-orange-500 to-yellow-500 text-white px-4 py-2 rounded-lg font-medium hover:shadow-lg transition-all duration-200 disabled:opacity-50 flex items-center gap-2"
                                                >
                                                    {isAiAssisting ? (
                                                        <>
                                                            <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent"></div>
                                                            Generating...
                                                        </>
                                                    ) : (
                                                        <>
                                                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 10V3L4 14h7v7l9-11h-7z" />
                                                            </svg>
                                                            Generate Description
                                                        </>
                                                    )}
                                                </button>
                                                <button
                                                    type="button"
                                                    onClick={() => setShowAiAssistant(false)}
                                                    className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
                                                >
                                                    Cancel
                                                </button>
                                            </div>
                                        </div>
                                    )}

                                    <textarea
                                        value={formData.description}
                                        onChange={(e) => handleInputChange("description", e.target.value)}
                                        placeholder="Describe what students will learn, the cultural significance, and what makes this program special..."
                                        className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-200 resize-none"
                                        rows={6}
                                    />
                                    <div className="flex justify-between items-center mt-2">
                                        {errors.description && <p className="text-red-500 text-sm">{errors.description}</p>}
                                        <p className="text-gray-500 text-sm ml-auto">{formData.description.length}/1000 characters</p>
                                    </div>
                                </div>

                                {/* Participant Criteria */}
                                <div>
                                    <label className="block text-sm font-semibold text-gray-700 mb-3">
                                        Participant Requirements <span className="text-red-500">*</span>
                                    </label>
                                    <textarea
                                        value={formData.criteria}
                                        onChange={(e) => handleInputChange("criteria", e.target.value)}
                                        placeholder="Who can join this program? (e.g., Age 18+, No prior experience needed, Interest in cultural heritage)"
                                        className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-200 resize-none"
                                        rows={4}
                                    />
                                    {errors.criteria && <p className="text-red-500 text-sm mt-2">{errors.criteria}</p>}
                                </div>

                                {/* Optional Video */}
                                <div>
                                    <label className="block text-sm font-semibold text-gray-700 mb-3">
                                        Introduction Video (Optional)
                                    </label>
                                    <input
                                        type="url"
                                        value={formData.videoUrl}
                                        onChange={(e) => handleInputChange("videoUrl", e.target.value)}
                                        placeholder="https://youtube.com/watch?v=..."
                                        className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-200"
                                    />
                                    <p className="text-gray-500 text-sm mt-2">Add a video introduction to help students understand your program better</p>
                                </div>
                            </div>
                        )}

                        {currentStep === 3 && (
                            <div className="space-y-6">
                                <h2 className="text-2xl font-bold text-gray-900 mb-6 flex items-center gap-3">
                                    <div className="w-8 h-8 bg-gradient-to-r from-orange-500 to-yellow-500 rounded-lg flex items-center justify-center">
                                        <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3a2 2 0 012-2h4a2 2 0 012 2v4m-6 0h6m-6 0l-1 12a2 2 0 002 2h6a2 2 0 002-2l-1-12" />
                                        </svg>
                                    </div>
                                    Schedule & Duration
                                </h2>

                                {/* Duration */}
                                <div>
                                    <label className="block text-sm font-semibold text-gray-700 mb-3">
                                        Program Duration <span className="text-red-500">*</span>
                                    </label>
                                    <input
                                        type="text"
                                        value={formData.duration}
                                        onChange={(e) => handleInputChange("duration", e.target.value)}
                                        placeholder="e.g., 3 months, 12 weeks, 6 sessions"
                                        className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-200"
                                    />
                                    {errors.duration && <p className="text-red-500 text-sm mt-2">{errors.duration}</p>}
                                </div>

                                {/* Start and End Dates */}
                                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                    <div>
                                        <label className="block text-sm font-semibold text-gray-700 mb-3">
                                            Start Date <span className="text-red-500">*</span>
                                        </label>
                                        <input
                                            type="date"
                                            value={formData.startDate}
                                            onChange={(e) => handleInputChange("startDate", e.target.value)}
                                            className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-200"
                                        />
                                        {errors.startDate && <p className="text-red-500 text-sm mt-2">{errors.startDate}</p>}
                                    </div>

                                    <div>
                                        <label className="block text-sm font-semibold text-gray-700 mb-3">
                                            End Date <span className="text-red-500">*</span>
                                        </label>
                                        <input
                                            type="date"
                                            value={formData.endDate}
                                            onChange={(e) => handleInputChange("endDate", e.target.value)}
                                            className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-200"
                                        />
                                        {errors.endDate && <p className="text-red-500 text-sm mt-2">{errors.endDate}</p>}
                                    </div>
                                </div>

                                {/* Program Status */}
                                <div>
                                    <label className="block text-sm font-semibold text-gray-700 mb-3">
                                        Program Status
                                    </label>
                                    <div className="flex items-center gap-4">
                                        <label className="flex items-center gap-2 cursor-pointer">
                                            <input
                                                type="radio"
                                                name="isOpen"
                                                checked={formData.isOpen}
                                                onChange={() => handleInputChange("isOpen", true)}
                                                className="w-4 h-4 text-orange-600 border-gray-300 focus:ring-orange-500"
                                            />
                                            <span className="text-gray-700">Open for Applications</span>
                                        </label>
                                        <label className="flex items-center gap-2 cursor-pointer">
                                            <input
                                                type="radio"
                                                name="isOpen"
                                                checked={!formData.isOpen}
                                                onChange={() => handleInputChange("isOpen", false)}
                                                className="w-4 h-4 text-orange-600 border-gray-300 focus:ring-orange-500"
                                            />
                                            <span className="text-gray-700">Draft (Not accepting applications)</span>
                                        </label>
                                    </div>
                                </div>
                            </div>
                        )}

                        {currentStep === 4 && (
                            <div className="space-y-6">
                                <h2 className="text-2xl font-bold text-gray-900 mb-6 flex items-center gap-3">
                                    <div className="w-8 h-8 bg-gradient-to-r from-orange-500 to-yellow-500 rounded-lg flex items-center justify-center">
                                        <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                        </svg>
                                    </div>
                                    Review & Publish
                                </h2>

                                {/* Preview Card */}
                                <div className="bg-gradient-to-br from-orange-50 to-yellow-50 border border-orange-200 rounded-xl p-6">
                                    <h3 className="text-lg font-bold text-gray-900 mb-4">Program Preview</h3>
                                    
                                    <div className="bg-white rounded-xl shadow-lg overflow-hidden">
                                        {imageUrl && (
                                            <img src={imageUrl} alt="Program" className="w-full h-48 object-cover" />
                                        )}
                                        <div className="p-6">
                                            <div className="flex items-center gap-2 mb-2">
                                                <span className="px-2 py-1 bg-orange-100 text-orange-600 text-xs font-semibold rounded-full">
                                                    {categories.find(cat => cat.id === formData.categoryId)?.name || "Category"}
                                                </span>
                                                <span className={`px-2 py-1 text-xs font-semibold rounded-full ${
                                                    formData.isOpen 
                                                        ? 'bg-green-100 text-green-600' 
                                                        : 'bg-gray-100 text-gray-600'
                                                }`}>
                                                    {formData.isOpen ? 'Open' : 'Draft'}
                                                </span>
                                            </div>
                                            <h4 className="text-xl font-bold text-gray-900 mb-2">{formData.title || "Program Title"}</h4>
                                            <p className="text-gray-600 mb-4 line-clamp-3">{formData.description || "Program description will appear here..."}</p>
                                            
                                            <div className="grid grid-cols-2 gap-4 text-sm">
                                                <div>
                                                    <span className="text-gray-500">Duration:</span>
                                                    <span className="ml-2 font-medium">{formData.duration || "Not specified"}</span>
                                                </div>
                                                <div>
                                                    <span className="text-gray-500">Location:</span>
                                                    <span className="ml-2 font-medium">{formData.location || "Not specified"}</span>
                                                </div>
                                                <div>
                                                    <span className="text-gray-500">Start Date:</span>
                                                    <span className="ml-2 font-medium">{formData.startDate || "Not specified"}</span>
                                                </div>
                                                <div>
                                                    <span className="text-gray-500">End Date:</span>
                                                    <span className="ml-2 font-medium">{formData.endDate || "Not specified"}</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                {/* Final Check */}
                                <div className="bg-blue-50 border border-blue-200 rounded-xl p-4">
                                    <div className="flex items-start gap-3">
                                        <svg className="w-5 h-5 text-blue-600 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                        </svg>
                                        <div>
                                            <h4 className="font-semibold text-blue-900 mb-1">Ready to publish?</h4>
                                            <p className="text-blue-700 text-sm">
                                                Once published, your program will be visible to all users and they can start applying. 
                                                You can always edit the details later.
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        )}

                        {/* Navigation Buttons */}
                        <div className="flex justify-between items-center pt-6 mt-8 border-t border-gray-200">
                            <button
                                type="button"
                                onClick={() => router.push("/dashboard/artisan/programs")}
                                className="px-6 py-3 border border-gray-300 rounded-xl text-gray-700 font-medium hover:bg-gray-50 transition-colors"
                            >
                                Cancel
                            </button>

                            <div className="flex gap-3">
                                {currentStep > 1 && (
                                    <button
                                        type="button"
                                        onClick={prevStep}
                                        className="px-6 py-3 border border-orange-300 rounded-xl text-orange-600 font-medium hover:bg-orange-50 transition-colors"
                                    >
                                        Previous
                                    </button>
                                )}

                                {currentStep < 4 ? (
                                    <button
                                        type="button"
                                        onClick={nextStep}
                                        className="px-6 py-3 bg-gradient-to-r from-orange-500 to-yellow-500 text-white font-medium rounded-xl hover:shadow-lg transition-all duration-200"
                                    >
                                        Continue
                                    </button>
                                ) : (
                                    <button
                                        type="button"
                                        onClick={handleSubmit}
                                        disabled={isSubmitting}
                                        className="px-8 py-3 bg-gradient-to-r from-green-500 to-emerald-500 text-white font-bold rounded-xl hover:shadow-lg transition-all duration-200 disabled:opacity-50 flex items-center gap-2"
                                    >
                                        {isSubmitting ? (
                                            <>
                                                <div className="animate-spin rounded-full h-5 w-5 border-2 border-white border-t-transparent"></div>
                                                Creating Program...
                                            </>
                                        ) : (
                                            <>
                                                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                                                </svg>
                                                Publish Program
                                            </>
                                        )}
                                    </button>
                                )}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
}